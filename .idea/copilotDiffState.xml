<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/arsip/ui/profile/ProfileViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/arsip/ui/profile/ProfileViewModel.kt" />
              <option name="originalContent" value="package com.example.arsip.ui.profile&#10;&#10;import android.net.Uri&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.arsip.data.ImageUploader&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.DocumentSnapshot&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import com.google.firebase.firestore.SetOptions&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val auth: FirebaseAuth,&#10;    private val db: FirebaseFirestore,&#10;    private val uploader: ImageUploader&#10;) : ViewModel() {&#10;&#10;    var name by mutableStateOf(&quot;&quot;)&#10;    var busy by mutableStateOf(false)&#10;&#10;    var tmpAddr by mutableStateOf(&quot;&quot;)&#10;    var tmpLat by mutableStateOf(&quot;&quot;)&#10;    var tmpLng by mutableStateOf(&quot;&quot;)&#10;&#10;    private val _snap = MutableStateFlow&lt;DocumentSnapshot?&gt;(null)&#10;    val snap: StateFlow&lt;DocumentSnapshot?&gt; = _snap&#10;&#10;    private var reg: ListenerRegistration? = null&#10;&#10;    init {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid != null) {&#10;            reg = db.collection(&quot;users&quot;).document(uid)&#10;                .addSnapshotListener { ds, _ -&gt;&#10;                    _snap.value = ds&#10;                    tmpAddr = ds?.getString(&quot;addressText&quot;) ?: &quot;&quot;&#10;                    tmpLat  = ds?.getDouble(&quot;lat&quot;)?.toString() ?: &quot;&quot;&#10;                    tmpLng  = ds?.getDouble(&quot;lng&quot;)?.toString() ?: &quot;&quot;&#10;                }&#10;        }&#10;    }&#10;&#10;    // FUNGSI BARU: Untuk menerima update LatLng dari map picker&#10;    fun onLatLngSelected(lat: Double?, lng: Double?) {&#10;        tmpLat = lat?.toString() ?: &quot;&quot;&#10;        tmpLng = lng?.toString() ?: &quot;&quot;&#10;    }&#10;&#10;    fun saveName() = viewModelScope.launch {&#10;        val uid = auth.currentUser?.uid ?: return@launch&#10;        val currentName = _snap.value?.getString(&quot;displayName&quot;) ?: &quot;&quot;&#10;        val newName = if (name.isBlank()) currentName else name&#10;&#10;        busy = true&#10;        runCatching {&#10;            db.collection(&quot;users&quot;).document(uid)&#10;                .set(mapOf(&quot;displayName&quot; to newName), SetOptions.merge())&#10;                .await()&#10;        }.onSuccess {&#10;            name = &quot;&quot; // reset input&#10;        }.also {&#10;            busy = false&#10;        }&#10;    }&#10;&#10;    fun updatePhoto(uri: Uri) = viewModelScope.launch {&#10;        val uid = auth.currentUser?.uid ?: return@launch&#10;        busy = true&#10;        runCatching {&#10;            val url = uploader.uploadOne(uri)&#10;            db.collection(&quot;users&quot;).document(uid)&#10;                .set(mapOf(&quot;photoUrl&quot; to url), SetOptions.merge())&#10;                .await()&#10;        }.also {&#10;            busy = false&#10;        }&#10;    }&#10;&#10;    fun saveAddress() = viewModelScope.launch {&#10;        val uid = auth.currentUser?.uid ?: return@launch&#10;        busy = true&#10;        runCatching {&#10;            val data = hashMapOf&lt;String, Any?&gt;(&#10;                &quot;addressText&quot; to tmpAddr,&#10;                &quot;lat&quot; to tmpLat.toDoubleOrNull(),&#10;                &quot;lng&quot; to tmpLng.toDoubleOrNull()&#10;            )&#10;            db.collection(&quot;users&quot;).document(uid)&#10;                .set(data, SetOptions.merge())&#10;                .await()&#10;        }.also {&#10;            busy = false&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        auth.signOut()&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        reg?.remove()&#10;        reg = null&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.arsip.ui.profile&#13;&#10;&#13;&#10;import android.net.Uri&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.runtime.mutableStateOf&#13;&#10;import androidx.compose.runtime.setValue&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import com.example.arsip.upload.ImageUploader&#13;&#10;import com.google.firebase.auth.FirebaseAuth&#13;&#10;import com.google.firebase.firestore.DocumentSnapshot&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore&#13;&#10;import com.google.firebase.firestore.ListenerRegistration&#13;&#10;import com.google.firebase.firestore.SetOptions&#13;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import kotlinx.coroutines.tasks.await&#13;&#10;import javax.inject.Inject&#13;&#10;&#13;&#10;@HiltViewModel&#13;&#10;class ProfileViewModel @Inject constructor(&#13;&#10;    private val auth: FirebaseAuth,&#13;&#10;    private val db: FirebaseFirestore,&#13;&#10;    private val uploader: ImageUploader&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    var name by mutableStateOf(&quot;&quot;)&#13;&#10;    var busy by mutableStateOf(false)&#13;&#10;&#13;&#10;    var tmpAddr by mutableStateOf(&quot;&quot;)&#13;&#10;    var tmpLat by mutableStateOf(&quot;&quot;)&#13;&#10;    var tmpLng by mutableStateOf(&quot;&quot;)&#13;&#10;&#13;&#10;    private val _snap = MutableStateFlow&lt;DocumentSnapshot?&gt;(null)&#13;&#10;    val snap: StateFlow&lt;DocumentSnapshot?&gt; = _snap&#13;&#10;&#13;&#10;    private var reg: ListenerRegistration? = null&#13;&#10;&#13;&#10;    init {&#13;&#10;        val uid = auth.currentUser?.uid&#13;&#10;        if (uid != null) {&#13;&#10;            reg = db.collection(&quot;users&quot;).document(uid)&#13;&#10;                .addSnapshotListener { ds, _ -&gt;&#13;&#10;                    _snap.value = ds&#13;&#10;                    tmpAddr = ds?.getString(&quot;addressText&quot;) ?: &quot;&quot;&#13;&#10;                    tmpLat  = ds?.getDouble(&quot;lat&quot;)?.toString() ?: &quot;&quot;&#13;&#10;                    tmpLng  = ds?.getDouble(&quot;lng&quot;)?.toString() ?: &quot;&quot;&#13;&#10;                }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // FUNGSI BARU: Untuk menerima update LatLng dari map picker&#13;&#10;    fun onLatLngSelected(lat: Double?, lng: Double?) {&#13;&#10;        tmpLat = lat?.toString() ?: &quot;&quot;&#13;&#10;        tmpLng = lng?.toString() ?: &quot;&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    fun saveName() = viewModelScope.launch {&#13;&#10;        val uid = auth.currentUser?.uid ?: return@launch&#13;&#10;        val currentName = _snap.value?.getString(&quot;displayName&quot;) ?: &quot;&quot;&#13;&#10;        val newName = if (name.isBlank()) currentName else name&#13;&#10;&#13;&#10;        busy = true&#13;&#10;        runCatching {&#13;&#10;            db.collection(&quot;users&quot;).document(uid)&#13;&#10;                .set(mapOf(&quot;displayName&quot; to newName), SetOptions.merge())&#13;&#10;                .await()&#13;&#10;        }.onSuccess {&#13;&#10;            name = &quot;&quot; // reset input&#13;&#10;        }.also {&#13;&#10;            busy = false&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun updatePhoto(uri: Uri) = viewModelScope.launch {&#13;&#10;        val uid = auth.currentUser?.uid ?: return@launch&#13;&#10;        busy = true&#13;&#10;        runCatching {&#13;&#10;            val url = uploader.uploadOne(uri)&#13;&#10;            db.collection(&quot;users&quot;).document(uid)&#13;&#10;                .set(mapOf(&quot;photoUrl&quot; to url), SetOptions.merge())&#13;&#10;                .await()&#13;&#10;        }.also {&#13;&#10;            busy = false&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun saveAddress() = viewModelScope.launch {&#13;&#10;        val uid = auth.currentUser?.uid ?: return@launch&#13;&#10;        busy = true&#13;&#10;        runCatching {&#13;&#10;            val data = hashMapOf&lt;String, Any?&gt;(&#13;&#10;                &quot;addressText&quot; to tmpAddr,&#13;&#10;                &quot;lat&quot; to tmpLat.toDoubleOrNull(),&#13;&#10;                &quot;lng&quot; to tmpLng.toDoubleOrNull()&#13;&#10;            )&#13;&#10;            db.collection(&quot;users&quot;).document(uid)&#13;&#10;                .set(data, SetOptions.merge())&#13;&#10;                .await()&#13;&#10;        }.also {&#13;&#10;            busy = false&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun logout() {&#13;&#10;        auth.signOut()&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onCleared() {&#13;&#10;        super.onCleared()&#13;&#10;        reg?.remove()&#13;&#10;        reg = null&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>